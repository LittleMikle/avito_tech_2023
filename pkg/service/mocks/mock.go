// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	tech "github.com/LittleMikle/avito_tech_2023"
	gomock "github.com/golang/mock/gomock"
)

// MockSegmentation is a mock of Segmentation interface.
type MockSegmentation struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentationMockRecorder
}

// MockSegmentationMockRecorder is the mock recorder for MockSegmentation.
type MockSegmentationMockRecorder struct {
	mock *MockSegmentation
}

// NewMockSegmentation creates a new mock instance.
func NewMockSegmentation(ctrl *gomock.Controller) *MockSegmentation {
	mock := &MockSegmentation{ctrl: ctrl}
	mock.recorder = &MockSegmentationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentation) EXPECT() *MockSegmentationMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentation) CreateSegment(segment tech.Segment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentationMockRecorder) CreateSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentation)(nil).CreateSegment), segment)
}

// DeleteSegment mocks base method.
func (m *MockSegmentation) DeleteSegment(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentationMockRecorder) DeleteSegment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentation)(nil).DeleteSegment), id)
}

// MockUsersSeg is a mock of UsersSeg interface.
type MockUsersSeg struct {
	ctrl     *gomock.Controller
	recorder *MockUsersSegMockRecorder
}

// MockUsersSegMockRecorder is the mock recorder for MockUsersSeg.
type MockUsersSegMockRecorder struct {
	mock *MockUsersSeg
}

// NewMockUsersSeg creates a new mock instance.
func NewMockUsersSeg(ctrl *gomock.Controller) *MockUsersSeg {
	mock := &MockUsersSeg{ctrl: ctrl}
	mock.recorder = &MockUsersSegMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersSeg) EXPECT() *MockUsersSegMockRecorder {
	return m.recorder
}

// CountRows mocks base method.
func (m *MockUsersSeg) CountRows() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRows")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRows indicates an expected call of CountRows.
func (mr *MockUsersSegMockRecorder) CountRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRows", reflect.TypeOf((*MockUsersSeg)(nil).CountRows))
}

// CreateUsersSeg mocks base method.
func (m *MockUsersSeg) CreateUsersSeg(userId int, segment tech.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsersSeg", userId, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUsersSeg indicates an expected call of CreateUsersSeg.
func (mr *MockUsersSegMockRecorder) CreateUsersSeg(userId, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersSeg", reflect.TypeOf((*MockUsersSeg)(nil).CreateUsersSeg), userId, segment)
}

// DeleteUsersSeg mocks base method.
func (m *MockUsersSeg) DeleteUsersSeg(userId int, segment tech.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsersSeg", userId, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsersSeg indicates an expected call of DeleteUsersSeg.
func (mr *MockUsersSegMockRecorder) DeleteUsersSeg(userId, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsersSeg", reflect.TypeOf((*MockUsersSeg)(nil).DeleteUsersSeg), userId, segment)
}

// GetHistory mocks base method.
func (m *MockUsersSeg) GetHistory(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockUsersSegMockRecorder) GetHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockUsersSeg)(nil).GetHistory), userId)
}

// GetUserSeg mocks base method.
func (m *MockUsersSeg) GetUserSeg(userId int) ([]tech.USegments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSeg", userId)
	ret0, _ := ret[0].([]tech.USegments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSeg indicates an expected call of GetUserSeg.
func (mr *MockUsersSegMockRecorder) GetUserSeg(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSeg", reflect.TypeOf((*MockUsersSeg)(nil).GetUserSeg), userId)
}

// RandomSegments mocks base method.
func (m *MockUsersSeg) RandomSegments(segment tech.Segment, percent float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomSegments", segment, percent)
	ret0, _ := ret[0].(error)
	return ret0
}

// RandomSegments indicates an expected call of RandomSegments.
func (mr *MockUsersSegMockRecorder) RandomSegments(segment, percent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomSegments", reflect.TypeOf((*MockUsersSeg)(nil).RandomSegments), segment, percent)
}

// ScheduleDelete mocks base method.
func (m *MockUsersSeg) ScheduleDelete(userId, days int, segment tech.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleDelete", userId, days, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleDelete indicates an expected call of ScheduleDelete.
func (mr *MockUsersSegMockRecorder) ScheduleDelete(userId, days, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleDelete", reflect.TypeOf((*MockUsersSeg)(nil).ScheduleDelete), userId, days, segment)
}
